/**
 * Generated by orval v7.11.2 üç∫
 * Do not edit manually.
 * Lawbox Landing API
 * API Spec
 * OpenAPI spec version: 1.0.0
 */
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query'
import { useMutation, useQuery } from '@tanstack/react-query'

import type { CreatedLead, Error, HealthResponse, NewLead } from './models'

import { axiosInstance } from './axios-instance'
type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Returns process status.
 * @summary Liveness probe
 */
export const getAPIHealth = (
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<HealthResponse>(
    { url: `/health`, method: 'GET', signal },
    options,
  )
}

export const getGetAPIHealthQueryKey = () => {
  return [`/health`] as const
}

export const getGetAPIHealthQueryOptions = <
  TData = Awaited<ReturnType<typeof getAPIHealth>>,
  TError = Error,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAPIHealth>>,
    TError,
    TData
  >
  request?: SecondParameter<typeof axiosInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey = queryOptions?.queryKey ?? getGetAPIHealthQueryKey()

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAPIHealth>>> = ({
    signal,
  }) => getAPIHealth(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getAPIHealth>>,
    TError,
    TData
  > & { queryKey: QueryKey }
}

export type GetAPIHealthQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAPIHealth>>
>
export type GetAPIHealthQueryError = Error

/**
 * @summary Liveness probe
 */

export function useGetAPIHealth<
  TData = Awaited<ReturnType<typeof getAPIHealth>>,
  TError = Error,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof getAPIHealth>>,
    TError,
    TData
  >
  request?: SecondParameter<typeof axiosInstance>
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetAPIHealthQueryOptions(options)

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey
  }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Accepts email, pain point, and firm size; returns the new lead id or an error.
 * @summary Create a new lead
 */
export const createLead = (
  newLead: NewLead,
  options?: SecondParameter<typeof axiosInstance>,
  signal?: AbortSignal,
) => {
  return axiosInstance<CreatedLead>(
    {
      url: `/leads`,
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      data: newLead,
      signal,
    },
    options,
  )
}

export const getCreateLeadMutationOptions = <
  TError = Error | Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createLead>>,
    TError,
    { data: NewLead },
    TContext
  >
  request?: SecondParameter<typeof axiosInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof createLead>>,
  TError,
  { data: NewLead },
  TContext
> => {
  const mutationKey = ['createLead']
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createLead>>,
    { data: NewLead }
  > = (props) => {
    const { data } = props ?? {}

    return createLead(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type CreateLeadMutationResult = NonNullable<
  Awaited<ReturnType<typeof createLead>>
>
export type CreateLeadMutationBody = NewLead
export type CreateLeadMutationError = Error | Error

/**
 * @summary Create a new lead
 */
export const useCreateLead = <
  TError = Error | Error,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createLead>>,
    TError,
    { data: NewLead },
    TContext
  >
  request?: SecondParameter<typeof axiosInstance>
}): UseMutationResult<
  Awaited<ReturnType<typeof createLead>>,
  TError,
  { data: NewLead },
  TContext
> => {
  const mutationOptions = getCreateLeadMutationOptions(options)

  return useMutation(mutationOptions)
}
